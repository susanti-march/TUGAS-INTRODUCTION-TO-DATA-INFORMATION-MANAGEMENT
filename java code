import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class SortingSimulation {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] data = null;

        while (true) {
            System.out.println("Menu Pilihan:");
            System.out.println("1. Random Data");
            System.out.println("2. Simulasi Bubble Sort - Ascending");
            System.out.println("3. Simulasi Selection Sort - Ascending");
            System.out.println("4. Simulasi Bubble Sort - Descending");
            System.out.println("5. Simulasi Selection Sort - Descending");
            System.out.println("6. Keluar");
            System.out.print("Pilihan Anda: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Masukkan batas bawah: ");
                    int lowerBound = scanner.nextInt();
                    System.out.print("Masukkan batas atas: ");
                    int upperBound = scanner.nextInt();
                    data = generateRandomData(lowerBound, upperBound);
                    System.out.println("Data Random: " + Arrays.toString(data));
                    break;
                case 2:
                    if (data != null) {
                        bubbleSortAscending(data.clone());
                    } else {
                        System.out.println("Data belum di-generate. Pilih menu 1 terlebih dahulu.");
                    }
                    break;
                case 3:
                    if (data != null) {
                        selectionSortAscending(data.clone());
                    } else {
                        System.out.println("Data belum di-generate. Pilih menu 1 terlebih dahulu.");
                    }
                    break;
                case 4:
                    if (data != null) {
                        bubbleSortDescending(data.clone());
                    } else {
                        System.out.println("Data belum di-generate. Pilih menu 1 terlebih dahulu.");
                    }
                    break;
                case 5:
                    if (data != null) {
                        selectionSortDescending(data.clone());
                    } else {
                        System.out.println("Data belum di-generate. Pilih menu 1 terlebih dahulu.");
                    }
                    break;
                case 6:
                    System.out.println("Terima kasih, program selesai.");
                    scanner.close();
                    return;
                default:
                    System.out.println("Pilihan tidak valid. Silakan pilih menu yang sesuai.");
            }
        }
    }

    private static int[] generateRandomData(int lowerBound, int upperBound) {
        int[] data = new int[5];
        Random random = new Random();
        for (int i = 0; i < 5; i++) {
            data[i] = random.nextInt(upperBound - lowerBound + 1) + lowerBound;
        }
        return data;
    }

    private static void bubbleSortAscending(int[] data) {
        System.out.println("Simulasi Bubble Sort - Ascending");
        int n = data.length;
        for (int i = 0; i < n - 1; i++) {
            boolean swapped = false;
            for (int j = 0; j < n - i - 1; j++) {
                if (data[j] > data[j + 1]) {
                    int temp = data[j];
                    data[j] = data[j + 1];
                    data[j + 1] = temp;
                    swapped = true;
                }
            }
            System.out.println("Putaran " + (i + 1) + ": " + Arrays.toString(data));
            if (!swapped) {
                break; // Jika tidak ada perubahan pada putaran tertentu, maka sudah terurut
            }
        }
        System.out.println("Hasil akhir: " + Arrays.toString(data));
    }

    private static void selectionSortAscending(int[] data) {
        System.out.println("Simulasi Selection Sort - Ascending");
        int n = data.length;
        for (int i = 0; i < n - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < n; j++) {
                if (data[j] < data[minIndex]) {
                    minIndex = j;
                }
            }
            int temp = data[i];
            data[i] = data[minIndex];
            data[minIndex] = temp;
            System.out.println("Putaran " + (i + 1) + ": " + Arrays.toString(data));
        }
        System.out.println("Hasil akhir: " + Arrays.toString(data));
    }

    private static void bubbleSortDescending(int[] data) {
        System.out.println("Simulasi Bubble Sort - Descending");
        int n = data.length;
        for (int i = 0; i < n - 1; i++) {
            boolean swapped = false;
            for (int j = 0; j < n - i - 1; j++) {
                if (data[j] < data[j + 1]) {
                    int temp = data[j];
                    data[j] = data[j + 1];
                    data[j + 1] = temp;
                    swapped = true;
                }
            }
            System.out.println("Putaran " + (i + 1) + ": " + Arrays.toString(data));
            if (!swapped) {
                break; // Jika tidak ada perubahan pada putaran tertentu, maka sudah terurut
            }
        }
        System.out.println("Hasil akhir: " + Arrays.toString(data));
    }

    private static void selectionSortDescending(int[] data) {
        System.out.println("Simulasi Selection Sort - Descending");
        int n = data.length;
        for (int i = 0; i < n - 1; i++) {
            int maxIndex = i;
            for (int j = i + 1; j < n; j++) {
                if (data[j] > data[maxIndex]) {
                    maxIndex = j;
                }
            }
            int temp = data[i];
            data[i] = data[maxIndex];
            data[maxIndex] = temp;
            System.out.println("Putaran " + (i + 1) + ": " + Arrays.toString(data));
        }
        System.out.println("Hasil akhir: " + Arrays.toString(data));
    }
}

